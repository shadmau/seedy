// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Test, console} from "forge-std/Test.sol";
import {SeedyVerifier} from "../src/SeedyVerifier.sol";

contract SeedyTest is Test {
    SeedyVerifier public seedyVerifier;

    function setUp() public {
        seedyVerifier = new SeedyVerifier();
    }

    function testVerifyProof() public {
 
    bytes memory x = hex"3a74a92014645ed1a6";
  bytes memory y = hex"08522d53a77ff0005fd7159cbeb443dfad2d339f672010aa2f87983256c544d6733a5de3b446b23fd0757e1bb26eb820909b4cffbb4350e26c8da78346040f66b36d6caba117b59ad6df9899be153af51d8d29e4baf3aff93b7255613700f22eaf54f5fd96fe5a0a96ccf097dca0fb5b2b83711d38e1f23813d68484e0c56cbcec";
  bytes memory N = hex"0c196ba6b8f017e8a7d66f83240c5f4acf45c8f6f9e48f2b9d63c6f9b742ccb8701f3af0b66d34ab63d6c6efa509572dfe3019575280ef967a0c0e9a0b68b10cb6a7063bd5c7cc7fc1f76147cb1a45a3f802e8a8774e37cf11f750b15811d37f321293c29f67cbaa4c9e4c7a3ad1830f06069dc271d48d2611b1ef8b64c7ead9c1";

  uint256 T = 1048576;
  uint256 delta = 9;
  bytes[] memory proof = new bytes[](11);
  proof[0] = hex'080ab85cd14393106a8bee77d02def1cc5acf5a864eb062525bc99e5e96635beef7aeb8fce8b90cde964466fca2b2672053631f3422c6dd3b3965b69ba985568a83b75fefd43ad47fccf99899af99e3b3ef2695341b1a9bd92a9556d4f925f2dc9ac28d5bb4d7dd8728bccbde664d3bd8ca30d8b7ecc0a3685ab93aa4b0c4e7c8c';
  proof[1] = hex'016f828af7c005ed9232035cc6729a8c87ae9d54f9f655b3f94efc8882e8675d70d736b6011701ff6dcb865e6b96c39a86c53620ab9a651f38fed556cd1be379b50c455f9ff393db206bc949f9ca531cee2207e32225a5efc7b1bce313e16285cea27122e3bf66667378f09cf2285cf2f765ce201c0b073f44ecc506f2517571a4';
  proof[2] = hex'012e11fedae5bf3c06e16b6bd886702b4fb2edfedef19c96faa4676b3a0d2747aa2e50a62aef7827b0cc59152f0f5aaf9adccfce7c6b56b04fb2c9d0e600811f5bbb3296610bf6eb1cfce42f49707209a46daf43a3238fd3fd88bfda1e7faabf0fbf67c8cfcb174a37c11b69b6324b13d2374572ef1816340bac4a0a454ff810c6';
  proof[3] = hex'0451602c587d9bf7824cddc7ed02cfa89fdf907cca70e1b30147ca72ccdd453332f2f081d1ff00e46861ba3453651f5dc529da05fdddeb1f0f423ec64f3bd2889649e27fa481d6c3e728b9d50229993ebb93e2ec5f71f5135e9e53d95ce885a84bf1917438b1a9689bd00d6acf8e9ea944d4f1d10b10dff82a904de81b697796ac';
  proof[4] = hex'0b5a88d2827b25e7e8e2dd84c2b3ec56b98f3d377908326eef62cbc8113cde06af4ed326bb1a8f6cae40db2705bc9388e4a740eec2471e9fba25efdbd7659ca5e0935e325501f98ea16afe0899c3a022fb34e578ac3707a9795afa14d78c296e115958b682f8bcfbcb8b698b01390f13288b822c16952b514df2f2c8a8d2203756';
  proof[5] = hex'03d4527099e348aba20dd598f96a171031acdd372bedc2ede7485c37b0294312ab6c8973e0a4b1dd8a2b906d4d5d86e6b75614e3fd9dc5478688bee30478c7773cb93275778b6d120be505925a423b59cef90204d1e2c8bf88d4d0fb4093fc1d751821322753a199ff29245828fd558d28bed7ca3e03c2717d8a63169f61cc2276';
  proof[6] = hex'0c15bda90a610b84fa231d126457cd58bf5384d542ca2c6523abc1a6a3a3b7a20f4833756de11a9fd27d7cb25b57a6b2e980e840189df2807e01be2e91880688400b2bffac5a1afa5131060552d18bc90b49602c436665960b67f252eb05614434d7be8b4c625c2e969cc4a1c51ea5de67b3028b73d8cf0fa75f9d91d7682f7590';
  proof[7] = hex'075f7feff24204adaf801a8640c593680f283dcaecd9e1a1cddb42f926278c6b7ddf3eab69c20fea801000d2534d53a19c61849f1ee9db7774eb00513c53261ce9c17e269ffa521e160309fe50f914d5bb40ab313d06b582eaa8360a555ce165be02ba6ed47b14d595d144ffeaf3cce76edef5e4b86194a7fd1460b27de92b554d';
  proof[8] = hex'3371fcb9f830b56badef2fc68e70f384d6c8fd29b5e1de8a6c8ccc35a888305e0bca1c85a55454416c2f39fbd0e36c59c326cac7e4bc54708fc14b2a7d1063f56523801ec86d43ad71f2bf216e828f39ee58385f65b768215e7b677c62ce200a959ea9f81dd51fa968a728ebcb3990f6969711ad74125e7d941d439219f9bce9';
  proof[9] = hex'd60aeedf849db66387c6569baac27d25038bd85cc287dc8435a28e7f29347113cf119ecadcab79fe2a4ad7f9a17ed9fdb5f6d7676a917ca49d05d585d7f07141ce425f09947cd44ced52a8392b0784688095f58d3a62368cc69d9ca784b961021bc7bccce7b31e0eecf9af5475d5786f5b8822161da9ab9f2f870ecfb9f9cb4b';
  proof[10] = hex'084b61cde295d46bc624a50eba660d8c80e5d69a856be678d155146091afca8d4d9b50db6612cc3cfea584d4e32194695baf77c3619a318cdcdd9542cc39180734744e5ba66dda9c63166fe8f35a1e3cc13adf8ea7d6c417b57ec6f807ae96e74fb898559f87df10f6a55a0c80ba9f489786985e1c94c7fb5fb2a7c3718a500e30';
        //         uint256 T = 32768;
//         uint256 delta = 9;
//         bytes[] memory proof = new bytes[](6);
//  proof[0] = hex'054909b5caca3b4ac842fdfb1ef7806db6b4c6dcc8942f0a5dcd1642084a906bd7d5f35907dc89657ece295e305760223d1430f7cd4fcd1479145d5a51d17a2d2f1b3dddd016555b4f08a1da6f870135575a4956b0dbd45b54dd0377904e3ddc03070360a97ba5a857888c78973f4c86f5a10f5258bc74502520e9eaec9a05564e';
//     proof[1] = hex'8726d134b864ccfa6b0136d7c0c98b44c5723de0aa6bff03f7ba6a98682a5607f72f90c5d2d73cdc016ea2b7a5ce20e47dd227a8a50baa79d6973d52935097458e15d9f30ca9264958feaccc20bbe030226ece23b3501eecf31747348c02adf0acb36f86f819b97a384205ccf3907042d2f016b51b094bfddb2efde4a5c67e3f';
//     proof[2] = hex'04f391a0356c9def8f6e87229d33cad45f262b7bebdf100928b3e66125b82e7f75cfe7f49c28d15c7087ca011064dba8a20ba1d65fdf2c9c18150e49d07e70bcb37b60f3e65d4ea951ab45c85cae9c1d03e2b9b2ee09ea8561d0bd18c504160327d7a99e0225e6cb215076a2a3d56120d70ff1efaf1f6c29989ce5df9c0237a6ca';
//     proof[3] = hex'01ea7b265603c866d135f55a58c8bfacf33f5b61728f132a04a042aaacb9cd599cd6eedf6e0966a7527fd474f7823e10ffdbc9af64636e40975249a45d64228a50566e8f28e2e53799360d5f3c3bbb03cbd213dc1b8f1c676812fa180c8e97aa133827fc3d89a6d76f2a2ff16d4b593662c917e063de1629cd1b80f0f4f7d57ab2';
//   proof[4] = hex'0aeb736cbad2a9871e10e1394eeab4441af0afcd90cba081fc9c39c71e9a95ba6bd489292d7769ad41df13731f7db55cef7855a797eb22c106b43f4dc1371b26e1fd93a36611b1e1d82bb347dd57fcc29180b39d8573d61ca11f77b1383c37d412d3b277700b824ade020baa86ca6e017e8c95ada9562cd22a835921a5efb7afee';
//   proof[5] = hex'01c388050c6f3defe393a24bbfefba622c9a8faf67d49c981fdd52e7d23e4ea3d0dba8e8abaed86ff8f83829efba159fd58e5188a3b97b62967acc05da7a41f18aa799c45f37142e1f0cdf920e922cde89bde7a823b3a0a4485110b6660276a6fa0868acd5a193c11296d54f4c1d79c49b805a04ec4240deafdbf862587771ee2c';

        (bytes memory out1, bytes memory out2) = seedyVerifier.verify(x, y, T, delta, proof, N);
        console.logBytes(out1);
        console.logBytes(out2);
        bool isValid = keccak256(out1) == keccak256(out2);
        assertTrue(isValid, "Expected proof to be valid");
    }
}
